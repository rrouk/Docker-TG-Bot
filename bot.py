# -*- coding: utf-8 -*-
import os
import asyncio
import docker
import html
import shutil 
from datetime import datetime, timezone 
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv
from typing import Optional # –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è Optional

# –ò–ú–ü–û–†–¢–ò–†–£–ô–¢–ï –í–ê–®–£ –õ–û–ì–ò–ö–£ –®–ò–§–†–û–í–ê–ù–ò–Ø
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª cipher_logic.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ
try:
    from cipher_logic import AESGCMCipher
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –º–æ–¥—É–ª—å cipher_logic.py. –§—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
    AESGCMCipher = None


load_dotenv()

class DockerBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        self.allowed_users = [int(user_id) for user_id in os.getenv('ALLOWED_USERS', '').split(',') if user_id]
        
        # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ .env ---
        self.enc_password = os.getenv("ENCRYPTION_PASSWORD")
        self.iter_password = os.getenv("ITERATIONS_PASSWORD", "")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ .env
        self.folder_to_archive = os.getenv("FOLDER_TO_ARCHIVE") or "/app/data_to_archive"
        
        # ------------------------------------

        if not self.enc_password:
             print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–∞—Ä–æ–ª—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (ENCRYPTION_PASSWORD) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env.")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        if not os.path.isdir(self.folder_to_archive):
            os.makedirs(self.folder_to_archive, exist_ok=True)
            print(f"–ü–∞–ø–∫–∞ {self.folder_to_archive} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è –ø–∞–ø–∫–∞.")

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ Docker Socket —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
            if not os.path.exists('/var/run/docker.sock'):
                raise Exception("Docker socket –Ω–µ –Ω–∞–π–¥–µ–Ω: /var/run/docker.sock")

            self.docker_client = docker.DockerClient(base_url='unix:///var/run/docker.sock')
            self.docker_client.ping()
            print("Docker –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Docker: {e}")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker socket —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
            self.docker_client = None 

    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

    def _escape_html(self, text):
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return html.escape(str(text))

    def _format_uptime(self, started_at_str):
        if not started_at_str: return "N/A"
        import datetime
        s = started_at_str
        try:
            s = s.replace('Z', '+00:00')
            dot_index = s.find('.'); tz_index = s.find('+') 
            if dot_index != -1 and tz_index != -1:
                frac_len = tz_index - (dot_index + 1)
                if frac_len > 6: s = s[:dot_index + 1 + 6] + s[tz_index:]
                elif frac_len == 0: s = s[:dot_index] + s[tz_index:]
            try: started_at = datetime.datetime.strptime(s, "%Y-%m-%dT%H:%M:%S.%f%z")
            except ValueError: started_at = datetime.datetime.strptime(s, "%Y-%m-%dT%H:%M:%S%z")
            now = datetime.datetime.now(timezone.utc)
            diff = now - started_at
            seconds = int(diff.total_seconds())
            if seconds < 0: return "Unknown"
            if seconds < 60: return f"{seconds} —Å–µ–∫"
            elif seconds < 3600: return f"{seconds // 60} –º–∏–Ω"
            elif seconds < 86400: return f"{seconds // 3600} —á {(seconds % 3600) // 60} –º–∏–Ω"
            else: return f"{seconds // 86400} –¥ {(seconds % 86400) // 3600} —á"
        except Exception as e: return f"Raw: {started_at_str}"

    async def create_archive_and_encrypt(self, folder_path: str, output_file: str) -> tuple[str, int]:
        """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É, —à–∏—Ñ—Ä—É–µ—Ç –∞—Ä—Ö–∏–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏."""
        if not AESGCMCipher:
            raise Exception("–ú–æ–¥—É–ª—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (cipher_logic.py) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        if not self.enc_password:
             raise Exception("–ü–∞—Ä–æ–ª—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (ENCRYPTION_PASSWORD) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

        current_dir = os.getcwd() 
        temp_zip_path_base = os.path.join(current_dir, os.path.basename(folder_path))
        
        try:
            shutil.make_archive(
                base_name=temp_zip_path_base,
                format='zip', 
                root_dir=os.path.dirname(folder_path), 
                base_dir=os.path.basename(folder_path)
            )
            temp_zip_path = temp_zip_path_base + ".zip"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise

        try:
            with open(temp_zip_path, 'rb') as f:
                archive_data = f.read()
        finally:
            if os.path.exists(temp_zip_path):
                os.remove(temp_zip_path)

        cipher = AESGCMCipher(self.enc_password, self.iter_password)
        encrypted_data, iterations = cipher.encrypt(archive_data, iterations=None) 

        with open(output_file, 'wb') as f:
            f.write(encrypted_data)

        return output_file, iterations

    # --- Docker-—Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –∏–∑–º–µ–Ω–µ–Ω—ã) ---

    async def get_containers(self):
        if not self.docker_client: return []
        # ... (–∫–æ–¥ get_containers)
        try:
            containers = self.docker_client.containers.list(all=True)
            result = []
            for container in containers:
                if container.image.tags: image_tag = container.image.tags[0]
                else: image_tag = container.image.short_id
                started_at = None
                try: started_at = container.attrs['State'].get('StartedAt')
                except (KeyError, AttributeError): started_at = None
                result.append({'name': container.name, 'status': container.status, 'image': image_tag, 'started_at': started_at})
            return result
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
            return []

    async def start_container(self, container_name):
        if not self.docker_client: return False
        try:
            container = self.docker_client.containers.get(container_name)
            container.start()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return False

    async def stop_container(self, container_name):
        if not self.docker_client: return False
        try:
            container = self.docker_client.containers.get(container_name)
            container.stop()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return False

    async def restart_container(self, container_name):
        if not self.docker_client: return False
        try:
            container = self.docker_client.containers.get(container_name)
            container.restart()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return False

    async def get_container_logs(self, container_name, lines=20):
        if not self.docker_client: return "Docker –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        try:
            container = self.docker_client.containers.get(container_name)
            logs = container.logs(tail=lines).decode('utf-8')
            return logs
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {self._escape_html(e)}"

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        if hasattr(self, 'allowed_users') and self.allowed_users and user_id not in self.allowed_users:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return

        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", callback_data="list")],
            [InlineKeyboardButton("üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤", callback_data="encrypt_archive")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üê≥ <b>Docker Bot</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup, parse_mode='HTML'
        )

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        if query.data == "list":
            await self.show_containers(query)
        elif query.data == "back":
            await self.start_menu(query)
        elif query.data == "encrypt_archive": 
             await self.handle_encrypt_archive(query, context)
        elif query.data.startswith("container_"):
            await self.show_container_info(query)
        elif query.data.startswith("action_"):
            await self.handle_action(query)

    async def start_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", callback_data="list")],
            [InlineKeyboardButton("üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤", callback_data="encrypt_archive")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "üê≥ <b>Docker Bot</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup, parse_mode='HTML'
        )
    
    async def handle_encrypt_archive(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –∑–∞–¥–∞–Ω–Ω—É—é –ø–∞–ø–∫—É, —à–∏—Ñ—Ä—É–µ—Ç –µ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç."""
        
        if not self.enc_password:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ü–∞—Ä–æ–ª—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (ENCRYPTION_PASSWORD) –Ω–µ –∑–∞–¥–∞–Ω –≤ .env.", parse_mode='HTML')
            return
        
        folder_display_name = self._escape_html(os.path.basename(self.folder_to_archive))
        
        message = await query.edit_message_text(
            f"‚è≥ –ù–∞—á–∏–Ω–∞—é –∞—Ä—Ö–∏–≤–∞—Ü–∏—é –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ <code>{folder_display_name}</code>...", 
            parse_mode='HTML'
        )

        output_filename = ""
        encrypted_filepath = ""
        try:
            server_names_env = os.getenv("server_names_env")
            timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
            output_filename = f"{server_names_env}-{timestamp}.zip.enc"
            
            encrypted_filepath, iterations = await self.create_archive_and_encrypt(
                self.folder_to_archive, 
                os.path.join(os.getcwd(), output_filename)
            )

            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=encrypted_filepath,
                caption=(
                    f"‚úÖ <b>–ê—Ä—Ö–∏–≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω!</b>\n\n"
                ),
                parse_mode='HTML'
            )
            
            await context.bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=message.message_id,
                text=f"‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
                parse_mode='HTML'
            )

        except Exception as e:
            error_message = self._escape_html(f"–ü—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏/—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            await context.bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=message.message_id,
                text=f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:**\n\n<code>{error_message}</code>",
                parse_mode='HTML'
            )
        finally:
            if encrypted_filepath and os.path.exists(encrypted_filepath):
                os.remove(encrypted_filepath)

        await self.start_menu(query)
    
    async def show_containers(self, query):
        """Display the list of containers including status, image, and uptime."""
        if not self.docker_client:
            await query.edit_message_text("‚ùå Docker –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏.", parse_mode='HTML')
            return await self.start_menu(query)

        containers = await self.get_containers()

        if not containers:
            await query.edit_message_text("üìã –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", parse_mode='HTML')
            return

        message = "üìã <b>–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:</b>\n\n"
        keyboard = []

        for container in containers:
            status = container['status']
            started_at = container.get('started_at')

            status_emoji = "üü¢" if status == 'running' else "üî¥"

            uptime_str = "N/A"
            if status == 'running' and started_at: uptime_str = self._format_uptime(started_at)
            
            escaped_name = self._escape_html(container['name'])
            escaped_image = self._escape_html(container['image'])
            
            message += f"{status_emoji} <code>{escaped_name}</code>\n"
            message += f"    –°—Ç–∞—Ç—É—Å: {status}\n"
            message += f"    –û–±—Ä–∞–∑: {escaped_image}\n"
            message += f"    –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}\n\n"

            keyboard.append([
                InlineKeyboardButton(
                    f"{'‚èπÔ∏è' if status == 'running' else '‚ñ∂Ô∏è'} {container['name']}",
                    callback_data=f"container_{container['name']}"
                )
            ])

        # ‚¨áÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –£–¥–∞–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤" –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')


    async def show_container_info(self, query, container_name: Optional[str] = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ."""
        if not self.docker_client: return await self.start_menu(query)
        
        # ‚¨áÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1 (—á–∞—Å—Ç—å 2): –ü–∞—Ä—Å–∏–º –∏–º—è, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ —è–≤–Ω–æ
        if not container_name:
            try: container_name = query.data.split("_", 1)[1]
            except IndexError:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.", parse_mode='HTML')
                return

        try:
            container = self.docker_client.containers.get(container_name)
            status = container.status

            if container.image.tags: image_tag = container.image.tags[0]
            else: image_tag = container.image.short_id

            escaped_name = self._escape_html(container_name)
            escaped_image = self._escape_html(image_tag)
            
            message = f"üê≥ <b>{escaped_name}</b>\n\n"
            message += f"–°—Ç–∞—Ç—É—Å: {status}\n"
            message += f"–û–±—Ä–∞–∑: <code>{escaped_image}</code>\n\n"

            keyboard = []

            if status == 'running':
                keyboard.append([InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"action_stop_{container_name}")])
                keyboard.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"action_restart_{container_name}")])
            else:
                keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"action_start_{container_name}")])

            keyboard.append([InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data=f"action_logs_{container_name}")])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list")])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')
        except docker.errors.NotFound:
             await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–º–µ–Ω–µ–º <code>{self._escape_html(container_name)}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode='HTML')
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: {self._escape_html(e)}", parse_mode='HTML')


    async def handle_action(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏"""
        if not self.docker_client: return await self.start_menu(query)
        
        data = query.data.split("_")
        action = data[1]
        container_name = "_".join(data[2:])
        escaped_name = self._escape_html(container_name)

        if action == "start":
            success = await self.start_container(container_name)
            if success: await query.edit_message_text(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä <code>{escaped_name}</code> –∑–∞–ø—É—â–µ–Ω", parse_mode='HTML')
            else: await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ <code>{escaped_name}</code>", parse_mode='HTML')
        elif action == "stop":
            success = await self.stop_container(container_name)
            if success: await query.edit_message_text(f"‚èπÔ∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä <code>{escaped_name}</code> –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", parse_mode='HTML')
            else: await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ <code>{escaped_name}</code>", parse_mode='HTML')
        elif action == "restart":
            success = await self.restart_container(container_name)
            if success: await query.edit_message_text(f"üîÑ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä <code>{escaped_name}</code> –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω", parse_mode='HTML')
            else: await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ <code>{escaped_name}</code>", parse_mode='HTML')
        elif action == "logs":
            logs = await self.get_container_logs(container_name, 20)
            
            if len(logs) > 3000: logs = logs[-3000:] + "\n\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫)"

            escaped_logs = self._escape_html(logs)
            message = f"üìù <b>–õ–æ–≥–∏ <code>{escaped_name}</code>:</b>\n\n<pre>{escaped_logs}</pre>"
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–µ–¥–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"container_{container_name}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')
        
        # ‚¨áÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1 (—á–∞—Å—Ç—å 1): –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–æ—Å–ª–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if action in ["start", "stop", "restart"]:
            await asyncio.sleep(1) # –ñ–¥–µ–º, –ø–æ–∫–∞ Docker –æ–±–Ω–æ–≤–∏—Ç —Å—Ç–∞—Ç—É—Å
            # –í—ã–∑—ã–≤–∞–µ–º show_container_info —Å –∏–º–µ–Ω–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            await self.show_container_info(query, container_name)
        
        # –í–ù–ò–ú–ê–ù–ò–ï: –°—Ç–∞—Ä—ã–π –∫–æ–¥, –≤—ã–∑—ã–≤–∞—é—â–∏–π self.start_menu(query), —É–¥–∞–ª–µ–Ω.

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.bot_token:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª–µ .env")
            return
            
        application = Application.builder().token(self.bot_token).build()

        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CallbackQueryHandler(self.button_handler))

        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()

if __name__ == "__main__":
    try:
        bot = DockerBot()
        bot.run()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")