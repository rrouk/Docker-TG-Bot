import os
import asyncio
import docker
import html # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è html –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv
import datetime
from datetime import timezone 

load_dotenv()

class DockerBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        self.allowed_users = [int(user_id) for user_id in os.getenv('ALLOWED_USERS', '').split(',') if user_id]
        
        try:
            if not os.path.exists('/var/run/docker.sock'):
                raise Exception("Docker socket –Ω–µ –Ω–∞–π–¥–µ–Ω: /var/run/docker.sock")

            self.docker_client = docker.DockerClient(base_url='unix:///var/run/docker.sock')
            self.docker_client.ping()
            print("Docker –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Docker: {e}")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker socket —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
            raise

    # --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
    def _escape_html(self, text):
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return html.escape(str(text))
    # --------------------------------------------------------

    def _format_uptime(self, started_at_str):
        """
        Calculates and formats the uptime from the ISO 8601 string returned by Docker.
        """
        if not started_at_str:
            return "N/A"

        s = started_at_str

        try:
            s = s.replace('Z', '+00:00')
            dot_index = s.find('.')
            tz_index = s.find('+') 

            if dot_index != -1 and tz_index != -1:
                frac_len = tz_index - (dot_index + 1)
                if frac_len > 6:
                    s = s[:dot_index + 1 + 6] + s[tz_index:]
                elif frac_len == 0:
                    s = s[:dot_index] + s[tz_index:]

            try:
                started_at = datetime.datetime.strptime(s, "%Y-%m-%dT%H:%M:%S.%f%z")
            except ValueError:
                started_at = datetime.datetime.strptime(s, "%Y-%m-%dT%H:%M:%S%z")

            now = datetime.datetime.now(timezone.utc)
            diff = now - started_at
            seconds = int(diff.total_seconds())

            if seconds < 0:
                return "Unknown"

            if seconds < 60:
                return f"{seconds} —Å–µ–∫"
            elif seconds < 3600:
                minutes = seconds // 60
                return f"{minutes} –º–∏–Ω"
            elif seconds < 86400:
                hours = seconds // 3600
                minutes = (seconds % 3600) // 60
                return f"{hours} —á {minutes} –º–∏–Ω"
            else:
                days = seconds // 86400
                hours = (seconds % 86400) // 3600
                return f"{days} –¥ {hours} —á"
        except Exception as e:
            print(f"Error parsing Docker timestamp '{started_at_str}'. Error: {e}")
            return f"Raw: {started_at_str}"


    async def get_containers(self):
        """Retrieve a list of all containers, including uptime data."""
        try:
            containers = self.docker_client.containers.list(all=True)
            result = []
            for container in containers:
                if container.image.tags:
                    image_tag = container.image.tags[0]
                else:
                    image_tag = container.image.short_id

                started_at = None
                try:
                    started_at = container.attrs['State'].get('StartedAt')
                except (KeyError, AttributeError):
                    started_at = None

                result.append({
                    'name': container.name,
                    'status': container.status,
                    'image': image_tag,
                    'started_at': started_at
                })
            return result
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
            return []

    async def start_container(self, container_name):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
        try:
            container = self.docker_client.containers.get(container_name)
            container.start()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return False

    async def stop_container(self, container_name):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
        try:
            container = self.docker_client.containers.get(container_name)
            container.stop()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return False

    async def restart_container(self, container_name):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
        try:
            container = self.docker_client.containers.get(container_name)
            container.restart()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return False

    async def get_container_logs(self, container_name, lines=20):
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            container = self.docker_client.containers.get(container_name)
            logs = container.logs(tail=lines).decode('utf-8')
            return logs
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {self._escape_html(e)}"

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        if hasattr(self, 'allowed_users') and self.allowed_users and user_id not in self.allowed_users:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return

        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", callback_data="list")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # parse_mode='HTML'
        await update.message.reply_text(
            "üê≥ <b>Docker Bot</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup, parse_mode='HTML'
        )

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        if query.data == "list":
            await self.show_containers(query)
        elif query.data == "back":
            await self.start_menu(query)
        elif query.data.startswith("container_"):
            await self.show_container_info(query)
        elif query.data.startswith("action_"):
            await self.handle_action(query)

    async def start_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", callback_data="list")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # parse_mode='HTML'
        await query.edit_message_text(
            "üê≥ <b>Docker Bot</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup, parse_mode='HTML'
        )

    async def show_containers(self, query):
        """Display the list of containers including status, image, and uptime."""
        containers = await self.get_containers()

        if not containers:
            # parse_mode='HTML'
            await query.edit_message_text("üìã –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", parse_mode='HTML')
            return

        # –ó–∞–º–µ–Ω–∞ * –Ω–∞ <b>
        message = "üìã <b>–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:</b>\n\n"
        keyboard = []

        for container in containers:
            status = container['status']
            started_at = container.get('started_at')

            status_emoji = "üü¢" if status == 'running' else "üî¥"

            uptime_str = "N/A"
            if status == 'running' and started_at:
                uptime_str = self._format_uptime(started_at)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º <code> –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ image, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
            escaped_name = self._escape_html(container['name'])
            escaped_image = self._escape_html(container['image'])
            
            message += f"{status_emoji} <code>{escaped_name}</code>\n"
            message += f"    –°—Ç–∞—Ç—É—Å: {status}\n"
            message += f"    –û–±—Ä–∞–∑: {escaped_image}\n"
            message += f"    –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}\n\n"

            # –ö–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–∞–∑–º–µ—Ç–∫—É
            keyboard.append([
                InlineKeyboardButton(
                    f"{'‚èπÔ∏è' if status == 'running' else '‚ñ∂Ô∏è'} {container['name']}",
                    callback_data=f"container_{container['name']}"
                )
            ])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        # parse_mode='HTML'
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')

    async def show_container_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
        try:
            container_name = query.data.split("_", 1)[1]
        except IndexError:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.", parse_mode='HTML')
            return

        try:
            container = self.docker_client.containers.get(container_name)
            status = container.status

            if container.image.tags:
                image_tag = container.image.tags[0]
            else:
                image_tag = container.image.short_id

            escaped_name = self._escape_html(container_name)
            escaped_image = self._escape_html(image_tag)
            
            # –ó–∞–º–µ–Ω–∞ * –Ω–∞ <b> –∏ ` –Ω–∞ <code>
            message = f"üê≥ <b>{escaped_name}</b>\n\n"
            message += f"–°—Ç–∞—Ç—É—Å: {status}\n"
            message += f"–û–±—Ä–∞–∑: <code>{escaped_image}</code>\n\n"

            keyboard = []

            if status == 'running':
                keyboard.append([InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"action_stop_{container_name}")])
                keyboard.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"action_restart_{container_name}")])
            else:
                keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"action_start_{container_name}")])

            keyboard.append([InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data=f"action_logs_{container_name}")])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list")])

            reply_markup = InlineKeyboardMarkup(keyboard)
            # parse_mode='HTML'
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')
        except docker.errors.NotFound:
             await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–º–µ–Ω–µ–º <code>{self._escape_html(container_name)}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode='HTML')
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: {self._escape_html(e)}", parse_mode='HTML')

    async def handle_action(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏"""
        data = query.data.split("_")
        action = data[1]
        container_name = "_".join(data[2:])
        escaped_name = self._escape_html(container_name)

        if action == "start":
            success = await self.start_container(container_name)
            if success:
                await query.edit_message_text(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä <code>{escaped_name}</code> –∑–∞–ø—É—â–µ–Ω", parse_mode='HTML')
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ <code>{escaped_name}</code>", parse_mode='HTML')
        elif action == "stop":
            success = await self.stop_container(container_name)
            if success:
                await query.edit_message_text(f"‚èπÔ∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä <code>{escaped_name}</code> –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", parse_mode='HTML')
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ <code>{escaped_name}</code>", parse_mode='HTML')
        elif action == "restart":
            success = await self.restart_container(container_name)
            if success:
                await query.edit_message_text(f"üîÑ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä <code>{escaped_name}</code> –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω", parse_mode='HTML')
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ <code>{escaped_name}</code>", parse_mode='HTML')
        elif action == "logs":
            logs = await self.get_container_logs(container_name, 20)
            
            if len(logs) > 3000:
                logs = logs[-3000:] + "\n\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫)"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º <pre> –¥–ª—è –ª–æ–≥–æ–≤ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ª–æ–≥–æ–≤
            escaped_logs = self._escape_html(logs)
            message = f"üìù <b>–õ–æ–≥–∏ <code>{escaped_name}</code>:</b>\n\n<pre>{escaped_logs}</pre>"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"container_{container_name}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # parse_mode='HTML'
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')


    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.bot_token:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª–µ .env")
            return
            
        application = Application.builder().token(self.bot_token).build()

        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CallbackQueryHandler(self.button_handler))

        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()

if __name__ == "__main__":
    try:
        bot = DockerBot()
        bot.run()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
