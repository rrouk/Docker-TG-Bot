import os
import asyncio
import docker
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv
import datetime # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å datetime –¥–ª—è —è–≤–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∫–ª–∞—Å—Å—É
from datetime import timezone # timezone –æ—Å—Ç–∞–≤–∏–ª –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

load_dotenv()

class DockerBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        self.allowed_users = [int(user_id) for user_id in os.getenv('ALLOWED_USERS', '').split(',') if user_id]
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å socket
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å socket
            if not os.path.exists('/var/run/docker.sock'):
                raise Exception("Docker socket –Ω–µ –Ω–∞–π–¥–µ–Ω: /var/run/docker.sock")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –ø—É—Ç—å –∫ socket
            self.docker_client = docker.DockerClient(base_url='unix:///var/run/docker.sock')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Docker
            self.docker_client.ping()
            print("Docker –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Docker: {e}")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker socket —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
            raise


    def _format_uptime(self, started_at_str):
        """
        Calculates and formats the uptime from the ISO 8601 string returned by Docker.
        This version is robust against excessive nanosecond precision and relies on 
        strptime for broader Python version compatibility.
        If parsing fails, returns the raw Docker string for debugging.
        """
        if not started_at_str:
            return "N/A"

        s = started_at_str # –í–≤–æ–¥–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é s –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ try

        try:
            # Docker format: YYYY-MM-DDTHH:MM:SS.nnnnnnnnnZ

            # 1. –ó–∞–º–µ–Ω—è–µ–º 'Z' (Zulu time) –Ω–∞ —è–≤–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ +00:00
            s = s.replace('Z', '+00:00')

            # 2. –û–±—Ä–µ–∑–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 6 –∑–Ω–∞–∫–æ–≤ - –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã)
            dot_index = s.find('.')
            tz_index = s.find('+') # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (+00:00)

            if dot_index != -1 and tz_index != -1:
                # –î–ª–∏–Ω–∞ –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏
                frac_len = tz_index - (dot_index + 1)

                if frac_len > 6:
                    # –û–±—Ä–µ–∑–∞–µ–º: –±–µ—Ä–µ–º —Å—Ç—Ä–æ–∫—É –¥–æ —Ç–æ—á–∫–∏ + —Ç–æ—á–∫–∞ + 6 –∑–Ω–∞–∫–æ–≤ + –æ—Å—Ç–∞—Ç–æ–∫ —Å—Ç—Ä–æ–∫–∏ (—Ç–∞–π–º–∑–æ–Ω–∞)
                    s = s[:dot_index + 1 + 6] + s[tz_index:]
                elif frac_len == 0:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∞, –Ω–æ –Ω–µ—Ç —Ü–∏—Ñ—Ä, —É–¥–∞–ª—è–µ–º —Ç–æ—á–∫—É
                    s = s[:dot_index] + s[tz_index:]

            # --- –ò—Å–ø–æ–ª—å–∑—É–µ–º strptime —Å fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ Python ---
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏ (–Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π —Å–ª—É—á–∞–π –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏)
                started_at = datetime.datetime.strptime(s, "%Y-%m-%dT%H:%M:%S.%f%z")
            except ValueError:
                # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏ –Ω–µ —É–¥–∞–ª—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Ö –Ω–µ –±—ã–ª–æ)
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–µ–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥
                    started_at = datetime.datetime.strptime(s, "%Y-%m-%dT%H:%M:%S%z")
                except ValueError:
                    # –ï—Å–ª–∏ –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ –ø–æ–¥–æ—à–ª–∏, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –ø–µ—á–∞—Ç–∏ RAW-—Å—Ç—Ä–æ–∫–∏
                    raise Exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            now = datetime.datetime.now(timezone.utc)

            diff = now - started_at
            seconds = int(diff.total_seconds())

            if seconds < 0:
                # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –±—É–¥—É—â–µ–º (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–µ —á–∞—Å–æ–≤)
                return "Unknown"

            # --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ ---
            if seconds < 60:
                return f"{seconds} —Å–µ–∫"
            elif seconds < 3600:
                minutes = seconds // 60
                return f"{minutes} –º–∏–Ω"
            elif seconds < 86400:
                hours = seconds // 3600
                minutes = (seconds % 3600) // 60
                return f"{hours} —á {minutes} –º–∏–Ω"
            else:
                days = seconds // 86400
                hours = (seconds % 86400) // 3600
                return f"{days} –¥ {hours} —á"
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ, —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å
            print(f"Error parsing Docker timestamp '{started_at_str}'. Error: {e}")
            return f"Raw: {started_at_str}"


    async def get_containers(self):
        """Retrieve a list of all containers, including uptime data."""
        try:
            containers = self.docker_client.containers.list(all=True)
            result = []
            for container in containers:
                # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω—ã–π if/else –≤–º–µ—Å—Ç–æ —Ç–µ—Ä–Ω–∞—Ä–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ---
                if container.image.tags:
                    image_tag = container.image.tags[0]
                else:
                    image_tag = container.image.short_id

                started_at = None
                # Get the 'StartedAt' field from container attributes
                try:
                    # container.attrs is necessary for reliable StartedAt
                    started_at = container.attrs['State'].get('StartedAt')
                except (KeyError, AttributeError):
                    started_at = None

                result.append({
                    'name': container.name,
                    'status': container.status,
                    'image': image_tag, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                    'started_at': started_at
                })
            return result
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
            return []
            
    # –ú–µ—Ç–æ–¥—ã get_container_stats, _calculate_cpu_percent, _calculate_memory_percent —É–¥–∞–ª–µ–Ω—ã

    async def start_container(self, container_name):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
        try:
            container = self.docker_client.containers.get(container_name)
            container.start()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return False

    async def stop_container(self, container_name):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
        try:
            container = self.docker_client.containers.get(container_name)
            container.stop()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return False

    async def restart_container(self, container_name):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
        try:
            container = self.docker_client.containers.get(container_name)
            container.restart()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return False

    async def get_container_logs(self, container_name, lines=20):
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            container = self.docker_client.containers.get(container_name)
            logs = container.logs(tail=lines).decode('utf-8')
            return logs
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}"

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        user_id = update.effective_user.id
        if hasattr(self, 'allowed_users') and self.allowed_users and user_id not in self.allowed_users:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return

        # –í –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ "–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", callback_data="list")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üê≥ *Docker Bot*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup, parse_mode='Markdown'
        )

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        if query.data == "list":
            await self.show_containers(query)
        # elif query.data == "stats": —É–¥–∞–ª–µ–Ω–æ
        #     await self.show_stats(query) —É–¥–∞–ª–µ–Ω–æ
        elif query.data == "back":
            await self.start_menu(query)
        elif query.data.startswith("container_"):
            await self.show_container_info(query)
        elif query.data.startswith("action_"):
            await self.handle_action(query)

    async def start_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        # –í –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ "–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", callback_data="list")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "üê≥ *Docker Bot*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup, parse_mode='Markdown'
        )

    async def show_containers(self, query):
        """Display the list of containers including status, image, and uptime."""
        containers = await self.get_containers()

        if not containers:
            await query.edit_message_text("üìã –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        message = "üìã *–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:*\n\n"
        keyboard = []

        for container in containers:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞
            status = container['status']
            started_at = container.get('started_at')

            status_emoji = "üü¢" if status == 'running' else "üî¥"

            # --- –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ uptime_str –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ---
            uptime_str = "N/A"
            if status == 'running' and started_at:
                uptime_str = self._format_uptime(started_at)

            message += f"{status_emoji} `{container['name']}`\n"
            message += f"    –°—Ç–∞—Ç—É—Å: {status}\n"
            message += f"    –û–±—Ä–∞–∑: {container['image']}\n"
            message += f"    –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}\n\n"

            # Button to view detailed info
            keyboard.append([
                InlineKeyboardButton(
                    f"{'‚èπÔ∏è' if status == 'running' else '‚ñ∂Ô∏è'} {container['name']}",
                    callback_data=f"container_{container['name']}"
                )
            ])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

    async def show_container_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
        try:
            container_name = query.data.split("_", 1)[1]
        except IndexError:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.", parse_mode='Markdown')
            return

        try:
            container = self.docker_client.containers.get(container_name)
            status = container.status

            # --- –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω—ã–π if/else –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ Python ---
            if container.image.tags:
                image_tag = container.image.tags[0]
            else:
                image_tag = container.image.short_id
            
            message = f"üê≥ *{container_name}*\n\n"
            message += f"–°—Ç–∞—Ç—É—Å: {status}\n"
            message += f"–û–±—Ä–∞–∑: {image_tag}\n\n" 
            # -----------------------------------------------------------------------

            keyboard = []

            if status == 'running':
                keyboard.append([InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"action_stop_{container_name}")])
                keyboard.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"action_restart_{container_name}")])
            else:
                keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"action_start_{container_name}")])

            keyboard.append([InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data=f"action_logs_{container_name}")])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list")])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        except docker.errors.NotFound:
             await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–º–µ–Ω–µ–º `{container_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode='Markdown')
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: {e}", parse_mode='Markdown')

    async def handle_action(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏"""
        data = query.data.split("_")
        action = data[1]
        container_name = "_".join(data[2:])

        if action == "start":
            success = await self.start_container(container_name)
            if success:
                await query.edit_message_text(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä `{container_name}` –∑–∞–ø—É—â–µ–Ω", parse_mode='Markdown')
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ `{container_name}`", parse_mode='Markdown')
        elif action == "stop":
            success = await self.stop_container(container_name)
            if success:
                await query.edit_message_text(f"‚èπÔ∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä `{container_name}` –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", parse_mode='Markdown')
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ `{container_name}`", parse_mode='Markdown')
        elif action == "restart":
            success = await self.restart_container(container_name)
            if success:
                await query.edit_message_text(f"üîÑ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä `{container_name}` –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω", parse_mode='Markdown')
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ `{container_name}`", parse_mode='Markdown')
        elif action == "logs":
            logs = await self.get_container_logs(container_name, 20)
            
            # Truncate logs if they are too long for Telegram
            if len(logs) > 3000:
                logs = logs[-3000:] + "\n\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫)"

            message = f"üìù *–õ–æ–≥–∏ `{container_name}`:*\n\n```\n{logs}\n```"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"container_{container_name}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

    # async def show_stats(self, query): —É–¥–∞–ª–µ–Ω

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.bot_token:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª–µ .env")
            return
            
        application = Application.builder().token(self.bot_token).build()

        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CallbackQueryHandler(self.button_handler))

        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()

if __name__ == "__main__":
    try:
        bot = DockerBot()
        bot.run()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
